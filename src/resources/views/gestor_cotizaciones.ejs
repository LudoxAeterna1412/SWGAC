<%- layout('layout') %>

  <div class="container-fluid">

    <!-- ===========================
       ENCABEZADO DE PÁGINA
  ============================ -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
      <h1 class="h3 mb-0 text-gray-800">Gestión de Cotizaciones</h1>
      <!-- Botón de reporte (comentado) -->
      <!-- 
    <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
      <i class="fas fa-download fa-sm text-white-50"></i> Generar Reporte
    </a> 
    -->
    </div>

    <!-- ===========================
       SUBTÍTULO: REGISTRAR COTIZACIÓN
  ============================ -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
      <h2 class="h4 mb-0 text-gray-800">Registrar Cotización</h2>
    </div>

    <!-- ===========================
       FORMULARIO DE COTIZACIÓN
  ============================ -->
    <form id="cotizacionForm" action="/cotizaciones" method="POST"
      style="display: flex; flex-direction: column; gap: 20px;">

      <!-- Sección 1: Datos de la cotización -->
      <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 4px;">
        <legend style="padding: 0 10px;">Datos de la cotización</legend>
        <div
          style="display: flex; flex-wrap: wrap; gap: 15px; justify-content: space-between; align-items: flex-start;">

          <div style="flex: 1 1 200px; display: flex; flex-direction: column;">
            <label for="codigo">Código</label>
            <input type="text" id="codigo" name="codigo" class="form-control form-control-sm" required>
          </div>

          <div style="flex: 1 1 200px; display: flex; flex-direction: column;">
            <label for="fecha">Fecha</label>
            <input type="date" id="fecha" name="fecha" class="form-control form-control-sm" required>
          </div>

          <div style="flex: 2 1 300px; display: flex; flex-direction: column;">
            <label for="cliente">Cliente</label>
            <input type="text" id="cliente" name="cliente" class="form-control form-control-sm" required>
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="tipo">Tipo</label>
            <select id="tipo" name="tipo" class="form-control form-control-sm" required>
              <option value="">Seleccione</option>
              <option value="publico">Publico</option>
              <option value="privado">Privado</option>
            </select>
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="dni">DNI</label>
            <input type="text" id="dni" name="dni" class="form-control form-control-sm">
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="ruc">RUC</label>
            <input type="text" id="ruc" name="ruc" class="form-control form-control-sm">
          </div>

          <!-- Nuevos campos agregados -->
          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="codigo_certificacion">Código Certificación</label>
            <input type="text" id="codigo_certificacion" name="codigo_certificacion"
              class="form-control form-control-sm">
          </div>

          <div style="flex: 2 1 300px; display: flex; flex-direction: column;">
            <label for="estructura">Estructura</label>
            <input type="text" id="estructura" name="estructura" class="form-control form-control-sm">
          </div>

          <div style="flex: 2 1 300px; display: flex; flex-direction: column;">
            <label for="asesor">Asesor</label>
            <input type="text" id="asesor" name="asesor" class="form-control form-control-sm">
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="celular">Celular</label>
            <input type="text" id="celular" name="celular" class="form-control form-control-sm">
          </div>

          <div style="flex: 2 1 300px; display: flex; flex-direction: column;">
            <label for="maestro">Maestro</label>
            <input type="text" id="maestro" name="maestro" class="form-control form-control-sm">
          </div>

          <div style="flex: 2 1 300px; display: flex; flex-direction: column;">
            <label for="email">Email</label>
            <input type="text" id="email" name="email" class="form-control form-control-sm">
          </div>


          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="estado">Estado</label>
            <select id="estado" name="estado" class="form-control form-control-sm" required>
              <option value="">Seleccione</option>
              <option value="esperando">esperando</option>
              <option value="apobado">apobado</option>
              <option value="terminado">terminado</option>
            </select>
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="total">Total</label>
            <input type="number" id="total" name="total" class="form-control form-control-sm" required step="0.01">
          </div>

        </div>
      </fieldset>

      <!-- Sección 2: Ítems de la cotización -->
      <fieldset class="border p-3 rounded">
        <legend class="px-2">Ítems</legend>

        <!-- Contenedor vacío: aquí solo se añadirán bloques horizontales -->
        <div id="itemsContainer" class="d-flex flex-column gap-3"></div>

        <!-- Botón para agregar nuevos ítems -->
        <div class="text-end mt-2">
          <button type="button" id="addItemBtn" class="btn btn-secondary btn-sm">
            Agregar ítem
          </button>
        </div>
      </fieldset>

      <!-- Sección 3: Resumen de Bombas -->
      <fieldset class="border p-3 rounded">
        <legend class="px-2">Resumen de Bombas</legend>
        <div
          style="display: flex; flex-wrap: wrap; gap: 15px; justify-content: space-between; align-items: flex-start;">

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="codigo_bomba">Código</label>
            <input type="text" id="codigo_bomba" name="codigo_bomba" class="form-control form-control-sm" required>
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="precio_unitario">Precio Unitario</label>
            <input type="number" id="precio_unitario" name="precio_unitario" class="form-control form-control-sm"
              required step="0.01">
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="excedente">Excedente</label>
            <input type="number" id="excedente" name="excedente" class="form-control form-control-sm" required
              step="0.01">
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="adicional">Adicional</label>
            <input type="number" id="adicional" name="adicional" class="form-control form-control-sm" required
              step="0.01">
          </div>

          <div style="flex: 1 1 150px; display: flex; flex-direction: column;">
            <label for="total_bomba">Total</label>
            <input type="number" id="total_bomba" name="total_bomba" class="form-control form-control-sm" required
              step="0.01">
          </div>

        </div>
      </fieldset>

      <!-- Botón de envío general -->
      <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
        <input type="submit" class="btn btn-primary btn-sm" value="Registrar">
      </div>
    </form>


    <!-- ===========================
       TEMPLATE DE ITEMS
  ============================ -->
    <template id="item-block-template">
      <!-- <div class="modal-item-row item-row"
        style="display: flex; flex-wrap: wrap; gap: 15px; justify-content: space-between; align-items: flex-start;"> -->

      <div class="item-block">
        <div style="flex: 1 1 80px; min-width: 150px; display: flex; flex-direction: column;">
          <label>Código</label>
          <input name="items[__IDX__][codigo]" required>
        </div>

        <div style="flex: 1 1 80px; min-width: 150px; display: flex; flex-direction: column;">
          <label>Código Diseño</label>
          <select name="items[__IDX__][codigo_diseno]" class="form-control form-control-sm" required>
            <option value="">Seleccione</option>
            <option value="100HE">100HE</option>
            <option value="100HS">100HS</option>
            <option value="140IP">140IP</option>
            <option value="140HE">140HE</option>
            <option value="140HS">140HS</option>
            <option value="175IP">175IP</option>
            <option value="175HE">175HE</option>
            <option value="175HS">175HS</option>
            <option value="210IP">210IP</option>
            <option value="210HE">210HE</option>
            <option value="210HS">210HS</option>
            <option value="245IP">245IP</option>
            <option value="245HE">245HE</option>
            <option value="245HS">245HS</option>
            <option value="280IP">280IP</option>
            <option value="280HE">280HE</option>
            <option value="280HS">280HS</option>
            <option value="310IP">310IP</option>
            <option value="310HE">310HE</option>
            <option value="310HS">310HS</option>
            <option value="315IP">315IP</option>
            <option value="315HE">315HE</option>
            <option value="315HS">315HS</option>
            <option value="350IP">350IP</option>
            <option value="350HE">350HE</option>
            <option value="350HS">350HS</option>
            <option value="420IP">420IP</option>
            <option value="420HE">420HE</option>
            <option value="420HS">420HS</option>
            <option value="M145IP">M145IP</option>
            <option value="M145HE">M145HE</option>
            <option value="M145HS">M145HS</option>
            <option value="M140IP">M140IP</option>
            <option value="M140HE">M140HE</option>
            <option value="M140HS">M140HS</option>
            <option value="M175IP">M175IP</option>
            <option value="M175HE">M175HE</option>
            <option value="M175HS">M175HS</option>
          </select>
        </div>

        <div style="flex: 2 1 250px; min-width: 200px; display: flex; flex-direction: column;">
          <label>Descripción</label>
          <input type="text" name="items[__IDX__][descripcion]" class="form-control form-control-sm" required>
        </div>
        <div style="flex: 1 1 80px; min-width: 100px; display: flex; flex-direction: column;">
          <label>Colocado</label>
          <select name="items[__IDX__][colocado]" class="form-control form-control-sm" required>
            <option value="No bombeable">No bombeable</option>
            <option value="bombeable">bombeable</option>
          </select>
        </div>

        <div style="flex: 1 1 80px; min-width: 150px; display: flex; flex-direction: column;">
          <label>Metros Cúbicos (m³)</label>
          <input type="number" step="0.01" name="items[__IDX__][metros_cubicos]" class="form-control form-control-sm"
            required>
        </div>

        <div style="flex: 1 1 80px; min-width: 100px; display: flex; flex-direction: column;">
          <label>Precio Unitario</label>
          <input type="number" step="0.01" name="items[__IDX__][precio_unitario]" class="form-control form-control-sm"
            required>
        </div>

        <div style="flex: 1 1 80px; min-width: 100px; display: flex; flex-direction: column;">
          <label>Total</label>
          <input type="number" step="0.01" name="items[__IDX__][total_item]" class="form-control form-control-sm"
            required>
        </div>

        <div class="field remove">
          <label class="visually-hidden">Eliminar</label>
          <button type="button" class="btn btn-danger btn-sm btn-remove" aria-label="Eliminar ítem">×</button>
        </div>
      </div>
    </template>

    <style>
      /* Cada fila horizontal */
      .item-block {
        display: flex;
        flex-wrap: nowrap;
        gap: 1rem;
        align-items: flex-end;
      }

      /* Asignación de anchos fijos porcentuales */
      .item-block .field {
        display: flex;
        flex-direction: column;
      }

      .item-block .field.code {
        flex: 0 0 10%;
      }

      .item-block .field.design {
        flex: 0 0 10%;
      }

      .item-block .field.desc {
        flex: 0 0 30%;
      }

      .item-block .field.coloc {
        flex: 0 0 13%;
      }

      .item-block .field.m3 {
        flex: 0 0 9%;
      }

      .item-block .field.price {
        flex: 0 0 9%;
      }

      .item-block .field.total {
        flex: 0 0 9%;
      }

      /* Input styling */
      .item-block input {
        width: 100%;
        padding: .25rem .5rem;
        font-size: .875rem;
        border: 1px solid #ccc;
        border-radius: .25rem;
      }

      /* Botón de eliminar */
      .item-block .btn-remove {
        flex: 0 0 auto;
        background: #dc3545;
        color: white;
        border: none;
        padding: .375rem .75rem;
        font-size: 1rem;
        line-height: 1;
        border-radius: .25rem;
        cursor: pointer;
        align-self: flex-end;
      }
    </style>
    <!-- ===========================
       TABLA DE ITEMS
  ============================ -->
    <script>
      (function () {
        let idx = 0;
        const container = document.getElementById('itemsContainer');
        const addBtn = document.getElementById('addItemBtn');
        const tpl = document.getElementById('item-block-template').innerHTML;

        // Añade una nueva fila horizontal
        function addItem() {
          const html = tpl.replace(/__IDX__/g, idx);
          const wrapper = document.createElement('div');
          wrapper.innerHTML = html.trim();
          container.appendChild(wrapper.firstElementChild);
          idx++;
        }

        // Delegación: escucha clicks en .btn-remove (no .remove-item)
        container.addEventListener('click', e => {
          if (e.target.matches('.btn-remove')) {
            const block = e.target.closest('.item-block');
            if (block) block.remove();
          }
        });

        // Al hacer clic, solo se crea la fila horizontal
        addBtn.addEventListener('click', addItem);

        // Si quieres un bloque inicial al cargar, descomenta:
        // addItem();
      })();
    </script>

    <!-- ===========================
       TABLA DE COTIZACIONES
  ============================ -->
    <h2 class="h4 mb-2 text-gray-800">Cotizaciones Registradas</h2>
    <div class="card shadow mb-4">
      <div class="card-body">
        <div class="table-responsive">
          <table id="cotizacionTable" class="table table-bordered" width="100%" cellspacing="0">
            <thead>
              <tr>
                <th>Código</th>
                <th>Fecha</th>
                <th>Cliente</th>
                <th>Tipo</th>
                <th>Estado</th>
                <th>Total</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tfoot>
              <tr>
                <th>Código</th>
                <th>Fecha</th>
                <th>Cliente</th>
                <th>Tipo</th>
                <th>Estado</th>
                <th>Total</th>
                <th>Acciones</th>
              </tr>
            </tfoot>
            <tbody id="cot-list"></tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- ===========================
     MODAL PARA EDITAR COTIZACIÓN
============================ -->
    <div class="modal fade" id="cotModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog" style="max-width: 2000px; width: 95%;" modal-dialog-scrollable>
        <div class="modal-content">

          <!-- Único FORM que abarca todo el modal -->
          <form id="modal_cotForm">
            <div class="modal-header">
              <h5 class="modal-title">Editar Cotización</h5>
              <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
              <% include modal_gestor_cotizaciones %>
                <!-- Aquí iría el contenido incluido -->
            </div>

            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
              <!-- Este submit DEBE estar dentro del mismo <form> -->
              <input type="submit" class="btn btn-primary" value="Actualizar Cotización">
            </div>
          </form>
          <!-- FIN del FORM -->

        </div>
      </div>
    </div>
    <!-- Scripts fuera del <form> -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const modalForm = document.getElementById('modal_cotForm');
        if (modalForm) {
          modalForm.addEventListener('submit', async ev => {
            ev.preventDefault();
            console.log('saveCot2() invocado vía EventListener');
            await saveCot2();
          });
        }
      });

      async function saveCot2() {
        const cotId = document.getElementById('modal_id').value.trim();
        if (!cotId) {
          console.error('No hay ID de cotización en modal_id');
          return;
        }

        const cabecera = {
          codigo: document.getElementById('modal_codigo').value.trim(),
          fecha: document.getElementById('modal_fecha').value,
          cliente: document.getElementById('modal_cliente').value.trim(),
          tipo: document.getElementById('modal_tipo').value,
          dni: document.getElementById('modal_dni').value.trim(),
          ruc: document.getElementById('modal_ruc').value.trim()
        };

        try {
          // 1. Actualizar cabecera
          const resCab = await fetch(`/api/cotizacion/updateModal/${cotId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(cabecera)
          });

          if (!resCab.ok) {
            const err = await resCab.json();
            alert('Error actualizando cotización: ' + (err.message || resCab.statusText));
            return;
          }

          console.log('Cabecera actualizada correctamente.');

          // 2. Eliminar ítems actuales
          const resItems = await fetch('/api/items_cotizacion/getByCodigo', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ codigo: cabecera.codigo })
          });

          if (resItems.ok) {
            const items = await resItems.json();
            const deletePromises = items.map(it =>
              fetch(`/api/items_cotizacion/delete/${it._id}`, { method: 'DELETE' })
            );
            await Promise.allSettled(deletePromises);
            console.log(`${items.length} ítems eliminados`);
          }

          // 3. Insertar nuevos ítems
          const container = document.getElementById('modalItemsContainer');
          const bloques = Array.from(container.querySelectorAll('.item-block'));

          const promesasItems = bloques.map(block => {
            const itemData = {
              codigo: cabecera.codigo,
              codigo_diseno: block.querySelector('[name$="[codigo_diseno]"]').value.trim(),
              descripcion: block.querySelector('[name$="[descripcion]"]').value.trim(),
              colocado: block.querySelector('[name$="[colocado]"]').value.trim(),
              metros_cubicos: +block.querySelector('[name$="[metros_cubicos]"]').value,
              precio_unitario: +block.querySelector('[name$="[precio_unitario]"]').value,
              total_item: +block.querySelector('[name$="[total_item]"]').value
            };

            return fetch('/api/items_cotizacion/store', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(itemData)
            }).then(async res => {
              if (!res.ok) {
                const err = await res.json();
                return Promise.reject(err.message || 'Error en ítem');
              }
              return res.json();
            });
          });

          // 4. Procesar pagos
          const pagosContainer = document.getElementById('modalPagosContainer');
          const pagoBlocks = pagosContainer.querySelectorAll('.pago-block');
          console.log('Detectados bloques de pago:', pagoBlocks.length);
          
          // === ELIMINAR PAGOS QUE YA NO ESTÁN EN EL MODAL ===
          try {
            const resPagos = await fetch('/api/pagos_cotizacion/getByCodigo', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ codigo: cabecera.codigo })
            });

            const pagosMostrados = Array.from(document.querySelectorAll('.pago-block input[name$="[id]"]'))
              .map(input => input.value.trim())
              .filter(id => !!id);

            if (resPagos.ok) {
              const pagosBD = await resPagos.json();

              const pagosAEliminar = pagosBD.filter(pg => !pagosMostrados.includes(pg._id));

              for (const pago of pagosAEliminar) {
                await fetch(`/api/pagos_cotizacion/delete/${pago._id}`, { method: 'DELETE' });
                console.log('Pago eliminado:', pago._id);
              }
            }
          } catch (err) {
            console.error('Error eliminando pagos no mostrados:', err);
          }

          for (const pagoBlock of pagoBlocks) {
            const codigo = pagoBlock.querySelector('input[name^="modal_pagos"][name$="[codigo]"]').value.trim();
            const monto_total = pagoBlock.querySelector('input[name^="modal_pagos"][name$="[monto_total]"]').value.trim();
            const monto_pago = pagoBlock.querySelector('input[name^="modal_pagos"][name$="[monto_pago]"]').value.trim();
            const fecha_pago = pagoBlock.querySelector('input[name^="modal_pagos"][name$="[fecha_pago]"]').value.trim();
            const forma_pago = pagoBlock.querySelector('select[name^="modal_pagos"][name$="[forma_pago]"]').value.trim();

            if (!codigo || !monto_pago || !fecha_pago || !forma_pago) {
              console.warn('Campos de pago incompletos, se omite este pago.');
              continue;
            }


            try {
              const idInput = pagoBlock.querySelector('input[name$="[id]"]');
              const id = idInput ? idInput.value.trim() : '';

              console.log('idInput ', id)
              const pagoData = {
                codigo,
                monto_total: parseFloat(monto_total),
                monto_pago: parseFloat(monto_pago),
                fecha_pago,
                forma_pago
              };

              let resPago;

              if (id) {
                // Actualizar pago existente
                resPago = await fetch(`/api/pagos_cotizacion/update/${id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(pagoData)
                });
              } else {
                // Crear nuevo pago
                resPago = await fetch('/api/pagos_cotizacion/store', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(pagoData)
                });
              }


            } catch (err) {
              console.error('Fallo al enviar pago:', err);
            }
          }

          // === BOMBAS - Enviar una sola bomba si está presente
          const bombaForm = document.getElementById('modalBombaSection');
          if (bombaForm) {
            const codigo = cabecera.codigo;
            const precio_unitario = bombaForm.querySelector('input[name="modal_bomba[precio_bomba]"]').value.trim();
            const m3 = bombaForm.querySelector('input[name="modal_bomba[m3]"]').value.trim();
            const tipo_bomba = bombaForm.querySelector('input[name="modal_bomba[tipo_bomba]"]').value.trim();
            const total = bombaForm.querySelector('input[name="modal_bomba[total_bomba]"]').value.trim();

            if (codigo && precio_unitario && m3 && tipo_bomba && total) {
              const bombaData = {
                codigo,
                precio_bomba: parseFloat(precio_unitario),
                m3: parseFloat(m3),
                tipo_bomba,
                total_bomba: parseFloat(total)
              };

              try {
                const resBomba = await fetch('/api/bombas_cotizacion/store', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(bombaData)
                });

                if (!resBomba.ok) {
                  console.error('Error al registrar bomba:', await resBomba.text());
                } else {
                  console.log('Bomba registrada:', bombaData);
                }
              } catch (err) {
                console.error('Fallo al enviar bomba:', err);
              }
            } else {
              console.warn('Campos de bomba incompletos, no se envía');
            }
          }



          const results = await Promise.allSettled(promesasItems);
          const exitos = results.filter(r => r.status === 'fulfilled').length;

          alert(`Se guardaron ${exitos}/${bloques.length} ítems.`);
        } catch (error) {
          console.error('Error en saveCot2():', error);
          alert('Ocurrió un error al guardar la cotización y sus ítems.');
        }
      }
    </script>

    <!-- ===========================
     SCRIPTS: Funciones de Cotización
=========================== -->
    <script>
      // 1) Abrir modal de Bootstrap genérico
      async function openModal(modalId) {
        try {
          await new Promise(resolve => setTimeout(resolve, 100));
          const modalEl = document.getElementById(modalId);
          new bootstrap.Modal(modalEl).show();
          await new Promise(resolve => setTimeout(resolve, 50));
        } catch (error) {
          console.error("Error al abrir el modal:", error);
        }
      }

      // 2) Eliminar cotización
      async function delCot(id) {
        if (!confirm('¿Eliminar cotización?')) return;
        const res = await fetch(`/api/cotizacion/delete/${id}`, { method: 'DELETE' });
        if (res.ok) loadCotizaciones();
        else alert('Error eliminando');
      }

      // 3) Editar cotización
      async function editCot(id) {
        try {
          // Traer cabecera
          const res = await fetch('/api/cotizacion/getById', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ _id: id })
          });
          if (!res.ok) throw new Error('Cotización no encontrada');
          const c = await res.json();

          // Abrir modal
          await openModal('cotModal');

          // Limpiar bombas
          const bombaContainer = document.getElementById('modalBombasContainer');
          if (bombaContainer) {
            bombaContainer.querySelectorAll('input').forEach(input => input.value = '');
          }

          // Llenar cabecera
          document.getElementById('modal_id').value = c._id;
          document.getElementById('modal_codigo').value = c.codigo;
          document.getElementById('modal_fecha').value = c.fecha.split('T')[0];
          document.getElementById('modal_cliente').value = c.cliente;
          document.getElementById('modal_tipo').value = c.tipo;
          document.getElementById('modal_dni').value = c.dni || '';
          document.getElementById('modal_ruc').value = c.ruc || '';

          // Traer ítems
          const rItems = await fetch('/api/items_cotizacion/getByCodigo', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ codigo: c.codigo })
          });
          if (!rItems.ok) throw new Error('No se pudo cargar los ítems');
          const items = await rItems.json();

          // Mostrar ítems
          const mContainer = document.getElementById('modalItemsContainer');
          mContainer.innerHTML = '';
          const addBtn = document.getElementById('addModalItemBtn');
          for (const itm of items) {
            addBtn.click();
            const filas = mContainer.querySelectorAll('.item-block');
            const fila = filas[filas.length - 1];

            fila.querySelector('input[name$="[codigo]"]').value = itm.codigo;
            fila.querySelector('select[name$="[codigo_diseno]"]').value = itm.codigo_diseno;
            fila.querySelector('input[name$="[descripcion]"]').value = itm.descripcion;
            fila.querySelector('select[name$="[colocado]"]').value = itm.colocado;
            fila.querySelector('input[name$="[metros_cubicos]"]').value = itm.metros_cubicos;
            fila.querySelector('input[name$="[precio_unitario]"]').value = itm.precio_unitario;
            fila.querySelector('input[name$="[total_item]"]').value = itm.total_item;

            const idInput = fila.querySelector('input[name$="[id]"]');
            if (idInput) idInput.value = itm._id || '';
          }

          // Traer pagos con manejo de errores sin romper flujo
          try {
            const rPagos = await fetch('/api/pagos_cotizacion/getByCodigo', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ codigo: c.codigo })
            });

            const pContainer = document.getElementById('modalPagosContainer');
            pContainer.innerHTML = '';

            if (rPagos.ok) {
              const pagos = await rPagos.json();
              const addPagoBtn = document.getElementById('addModalPagoBtn');
              for (const pg of pagos) {
                addPagoBtn.click();
                const bloques = pContainer.querySelectorAll('.pago-block');
                const bloque = bloques[bloques.length - 1];
                bloque.querySelector('input[name$="[id]"]').value = pg._id || '';

                bloque.querySelector('input[name$="[codigo]"]').value = pg.codigo;
                bloque.querySelector('input[name$="[monto_total]"]').value = pg.monto_total;
                bloque.querySelector('input[name$="[monto_pago]"]').value = pg.monto_pago;
                bloque.querySelector('input[name$="[fecha_pago]"]').value = pg.fecha_pago?.split('T')[0] || '';
                bloque.querySelector('select[name$="[forma_pago]"]').value = pg.forma_pago;
              }
              console.log(`Pagos cargados: ${pagos.length}`);
            } else {
              console.warn('No existen pagos o error en la solicitud');
            }
          } catch (errPagos) {
            console.warn('Error cargando pagos:', errPagos);
          }

          // Traer bomba
          try {
            const resBomba = await fetch('/api/bombas_cotizacion/getByCodigo', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ codigo: c.codigo })
            });

            const bombasContainer = document.getElementById('modalBombasContainer');
            if (!bombasContainer) {
              console.warn('modalBombasContainer no está presente en el DOM');
              return;
            }

            bombasContainer.querySelectorAll('input').forEach(input => input.value = '');

            if (!resBomba.ok) {
              console.warn('No se pudo cargar datos de bomba para esta cotización');
              return;
            }

            const bombas = await resBomba.json();
            if (!Array.isArray(bombas) || bombas.length === 0) {
              console.info('No hay bombas registradas para esta cotización');
              return;
            }

            const bomba = bombas[0];
            const precioInput = bombasContainer.querySelector('input[name="modal_bombas[0][precio_unitario]"]');
            const excedenteInput = bombasContainer.querySelector('input[name="modal_bombas[0][excedente]"]');
            const adicionalInput = bombasContainer.querySelector('input[name="modal_bombas[0][adicional]"]');
            const totalInput = bombasContainer.querySelector('input[name="modal_bombas[0][total]"]');

            if (!precioInput || !excedenteInput || !adicionalInput || !totalInput) {
              console.warn('Uno o más inputs de bomba no se encontraron en el DOM');
              return;
            }

            precioInput.value = bomba.precio_unitario ?? '';
            excedenteInput.value = bomba.excedente ?? '';
            adicionalInput.value = bomba.adicional ?? '';
            totalInput.value = bomba.total ?? '';

          } catch (e) {
            console.error('Error general al cargar datos de bomba:', e);
          }

        } catch (err) {
          console.error('Error en editCot:', err);
          alert(err.message || 'Error al cargar datos de cotización');
        }
      }

      window.onload = loadCotizaciones;
    </script>


    <!-- ===========================
     SCRIPTS: Operaciones de Cotización
     ============================ -->
    <script>
      // 1) Eliminar cotización de la vista
      //function eliminarItem(button) {
      //  const itemRow = button.closest('.item-row');
      //  if (itemRow) itemRow.remove();
      //}

      // 2) Exportar cotizaciones a Excel
      async function expCot(nro) {
        const codigo = nro;
        let url = '/api/cotizacion/export';
        if (codigo) url += `?codigo=${encodeURIComponent(codigo)}`;
        const res = await fetch(url);
        const blob = await res.blob();
        const downloadUrl = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = 'Reporte_Cotizacion.xlsx';
        a.click();
        URL.revokeObjectURL(downloadUrl);
      }

      // 3) Cargar y desplegar cotizaciones en la tabla
      async function loadCotizaciones() {
        try {
          const res = await fetch('/api/cotizacion/records');
          const cotizaciones = await res.json();
          $('#cotizacionTable').DataTable({
            data: cotizaciones.map(c => [
              c.codigo,
              new Date(c.fecha).toLocaleDateString(),
              c.cliente,
              c.tipo,
              c.estado,
              c.total,
              `<button onclick="editCot('${c._id}')">Editar</button>
           <button onclick="delCot('${c._id}')">Eliminar</button>
           <button onclick="expCot('${c.codigo}')">Exportar</button>`
            ]),
            destroy: true,
            columns: [
              { title: "Código" }, { title: "Fecha" }, { title: "Cliente" },
              { title: "Tipo" }, { title: "Estado" }, { title: "Total" },
              { title: "Acciones", orderable: false, searchable: false }
            ]
          });
        } catch (e) {
          console.error(e);
          alert('Error cargando cotizaciones');
        }
      }

      // 4) Inicializar carga de cotizaciones al iniciar la página
      window.onload = loadCotizaciones;
    </script>


    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('cotizacionForm');
        const submitBtn = form.querySelector('input[type="submit"]');

        // Al enviar el formulario de cotización
        form.addEventListener('submit', addCotizacion);

        async function addCotizacion(ev) {
          ev.preventDefault();
          submitBtn.disabled = true;

          // 1) Construir y enviar la cabecera de la cotización
          const cabecera = {
            codigo: document.getElementById('codigo').value.trim(),
            fecha: document.getElementById('fecha').value,
            cliente: document.getElementById('cliente').value.trim(),
            tipo: document.getElementById('tipo').value,
            dni: document.getElementById('dni').value.trim(),
            ruc: document.getElementById('ruc').value.trim(),
            codigo_certificacion: document.getElementById('codigo_certificacion').value.trim(),
            estructura: document.getElementById('estructura').value.trim(),
            asesor: document.getElementById('asesor').value.trim(),
            celular: document.getElementById('celular').value.trim(),
            maestro: document.getElementById('maestro').value.trim(),
            email: document.getElementById('email').value.trim(),
            estado: document.getElementById('estado').value.trim(),
            total: +document.getElementById('total').value
          };

          let cotID;
          try {
            const resCab = await fetch('/api/cotizacion/store', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(cabecera)
            });
            const bodyCab = await resCab.json();

            if (!resCab.ok) {
              // Eliminada verificación de clave duplicada, solo mensaje genérico
              alert(`Error al crear cotización: ${bodyCab.message || JSON.stringify(bodyCab)}`);
              submitBtn.disabled = false;
              return;
            }

            cotID = bodyCab._id;
            alert('Cotización creada (ID: ' + cotID + ')');

            // ───────────────────────────────────────────────────────────────────
            // 2) **NO limpiar aún #itemsContainer**, para poder leer los bloques que haya agregado el usuario.
            //    (Antes lo vaciábamos antes de tiempo, y por eso no había ítems que procesar.)
            // ───────────────────────────────────────────────────────────────────

            // 3) Recolectar y enviar cada ítem que efectivamente esté dentro de #itemsContainer
            const bloques = Array.from(
              document.querySelectorAll('#itemsContainer .item-block')
            );

            const promesasItems = bloques.map(block => {
              // AÑADIMOS el campo "codigo" para que el back-end relacione cada ítem con la cotización recién creada:
              const itemData = {
                codigo: cabecera.codigo,  // <--- campo obligatorio para asociar con la cabecera
                codigo_diseno: block.querySelector('[name$="[codigo_diseno]"]').value.trim(),
                descripcion: block.querySelector('[name$="[descripcion]"]').value.trim(),
                colocado: block.querySelector('[name$="[colocado]"]').value.trim(),
                metros_cubicos: +block.querySelector('[name$="[metros_cubicos]"]').value,
                precio_unitario: +block.querySelector('[name$="[precio_unitario]"]').value,
                total_item: +block.querySelector('[name$="[total_item]"]').value
              };

              return fetch('/api/items_cotizacion/store', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(itemData)
              }).then(async res => {
                if (!res.ok) {
                  const err = await res.json();
                  return Promise.reject(err.message || 'Error en ítem');
                }
                return res.json();
              });
            });

            const results = await Promise.allSettled(promesasItems);
            const exitos = results.filter(r => r.status === 'fulfilled').length;
            if (bloques.length) {
              alert(`Se guardaron ${exitos}/${bloques.length} ítems.`);
            }

            // 4) — Ahora procesar la Sección 3: Resumen de Bombas —
            const bombaData = {
              codigo: document.getElementById('codigo_bomba').value.trim(),
              precio_unitario: +document.getElementById('precio_unitario').value,
              excedente: +document.getElementById('excedente').value,
              adicional: +document.getElementById('adicional').value,
              total: +document.getElementById('total_bomba').value
            };
            try {
              const resBomba = await fetch('/api/bombas_cotizacion/store', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bombaData)
              });
              const bodyBomba = await resBomba.json();
              if (resBomba.ok) {
                alert('Bomba guardada (ID: ' + bodyBomba._id + ')');
              } else {
                alert('Error al guardar bomba: ' + (bodyBomba.message || JSON.stringify(bodyBomba)));
              }
            } catch (e) {
              console.error('Error bomba:', e);
              alert('Error inesperado en bomba.');
            }

            // 5) Limpiar formulario y recargar la lista
            form.reset();
            document.getElementById('itemsContainer').innerHTML = '';  // <-- Aquí sí limpiamos, tras procesar
            if (typeof loadCotizaciones === 'function') {
              loadCotizaciones();
            }
          } catch (err) {
            console.error('Error inesperado:', err);
            alert('Ocurrió un error. Revisa la consola.');
          } finally {
            submitBtn.disabled = false;
          }
        }
      });
    </script>